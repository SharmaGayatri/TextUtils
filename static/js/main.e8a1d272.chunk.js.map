{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","Text","setText","Fragment","style","color","heading","value","onChange","event","target","rows","backgroundColor","accept","file","files","reader","FileReader","onload","result","readAsText","newText","toUpperCase","toLowerCase","msg","SpeechSynthesisUtterance","text","window","speechSynthesis","speak","navigator","clipboard","writeText","showAlert","arr","split","i","length","charAt","slice","newtext3","join","trim","defaultProps","aboutText","Alert","alert","word","lower","capitalize","data-bs-dismiss","App","setMode","_useState3","_useState4","setAlert","document","body","components_Alert","message","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.e8a1d272.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import{Link} from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li> */}\r\n      \r\n            </ul>\r\n            <form className=\"d-flex\">\r\n              {/* <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-primary\" type=\"submit\">Search</button> */}\r\n              <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >Enable dark mode</label>\r\n</div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n  }\r\n\r\n  Navbar.propTypes ={\r\n    title: PropTypes.string.isRequired,\r\n     aboutText: PropTypes.string.isRequired}\r\n\r\n     Navbar.defaultProps = {\r\n      title: 'TextUtils',\r\n      aboutText:'About'\r\n    };","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = ()=>{\r\n  // console.log(Text);\r\n   let newText =Text.toUpperCase();\r\n   setText(newText);\r\n  }\r\n  const handleLpClick = ()=>{\r\n    // console.log(Text);\r\n     let newText =Text.toLowerCase();\r\n     setText(newText);}\r\n\r\n     const handleClrClick = ()=>{\r\n      // console.log(Text);\r\n       let newText =('');\r\n       setText(newText);}\r\n\r\n  const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n   }\r\n   const readTxt = (event) => {\r\n    let file = event.target.files[0];\r\n    let reader = new FileReader();\r\n    reader.onload = function(event){\r\n        setText(event.target.result);\r\n    };\r\n    reader.readAsText(file);\r\n}\r\nconst handleTextToSpeech = () => {\r\n  var msg = new SpeechSynthesisUtterance();\r\n  msg.text = Text;     //  text what you written\r\n  window.speechSynthesis.speak(msg);\r\n};\r\n\r\nconst handleCopy = () => {\r\n  navigator.clipboard.writeText(Text);\r\n  props.showAlert(\"Text Copied\",\"success\");\r\n}\r\n// Every letter after a full stop will get converted into an upper case letter\r\nconst handle_1stChar_Click = () => {\r\n  const arr = Text.split(\". \");\r\n\r\n  for (let i = 0; i < arr.length; i++) {\r\n    arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);\r\n  }\r\n  const newtext3 = arr.join(\". \");\r\n  setText(newtext3);\r\n};\r\n\r\n \r\n  const [Text, setText] = useState(\" \");\r\n  \r\n  //setText(\"new Text\");\r\n    return (\r\n      <>\r\n      <div className= \"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n<div className=\"mb-3\">\r\n  <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\"><h1>{props.heading}</h1></label>\r\n  <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" value={Text} onChange={handleOnChange}  rows=\"8\" style={{backgroundColor:props.mode==='dark'?'#144f89':'white', color: props.mode==='dark'?'white':'black'}}></textarea>\r\n\r\n <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\"><h3>OR</h3></label>\r\n <div>\r\n <input type=\"file\" className=\"btn btn-primary my-1\" accept=\"text/plain\" onChange = {readTxt}/>\r\n </div>\r\n </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to uppercase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLpClick}>Convert to LowerCase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClrClick}>Clear </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleTextToSpeech}>Speech</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy text</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={ handle_1stChar_Click}>Capitalize word after full stop</button>\r\n        {/* <button className=\"btn btn-primary mx-1\" onClick={binclick}>binary</button> */}\r\n        <div>\r\n{/* <textarea className=\"form-control\" id=\"exampleFormControlTextarea1\" rows=\"8\"  value ={Text} onChange={handleOnChange} onMouseEnter={changeCase}></textarea> */}\r\n</div>\r\n        </div>\r\n        <div className=\"container\"style={{color:props.mode==='dark'?'white':'black'}}>\r\n          <h2> Your Text Summary</h2>\r\n          \r\n          <p>{Text === \" \" ? '0': Text.trim().split(/\\s+/).length}words and {Text.length-1}characters </p>\r\n          <p>{ 0.08* Text.split(\"\").length}Minutes to read</p>\r\n         \r\n          <h2>Preview Here</h2>\r\n          <p>{Text.length>0?Text:\"Enter something in the above textbox to preview here\"}</p>\r\n\r\n\r\n        </div>\r\n        </>\r\n    )\r\n    \r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n     props.alert &&   <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong> {capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n  <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n</div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","//import logo from './logo.svg';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, {useState} from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n const [mode, setMode] = useState('light');\n const [alert, setAlert] = useState(null);\n  \n const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n     })\n     setTimeout(() => {\n       setAlert(null)\n     }, 1500);\n }\n\n   const toggleMode= ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor='#041939';\n      \n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n    }\n\n  }\n  return (\n    <>\n    {/* <Router> */}\n  <Navbar title= \"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n  <Alert alert={alert}/>\n  <div className =\"container my-3\">\n  {/* <Routes>\n          <Route exact path=\"/about\" element={<About />}>\n          </Route>\n          <Route exact path=\"/\" element={ */}\n          <TextForm showAlert= {showAlert} heading=\"Enter your text below\" mode={mode}/>\n           {/* </Route>\n        </Routes> */}\n  </div>  \n  {/* </Router> */}\n    </>\n  ) \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}